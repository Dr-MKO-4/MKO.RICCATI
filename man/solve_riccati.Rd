% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/solve_riccati.R
\name{solve_riccati}
\alias{solve_riccati}
\title{Résoudre une équation de Riccati}
\usage{
solve_riccati(a, b, d, y_particular, y_init, t)
}
\arguments{
\item{a}{Une fonction de t pour le paramètre a de l'équation de Riccati.}

\item{b}{Une fonction de t pour le paramètre b de l'équation de Riccati.}

\item{d}{Une fonction de t pour le paramètre d de l'équation de Riccati.}

\item{y_particular}{Une fonction de t pour le paramètre y_particular de l'équation de Riccati.}

\item{y_init}{La condition initiale y(0).}

\item{t}{Le temps auquel résoudre l'équation.}

\item{borne_inf}{La borne inférieure du domaine de validité des paramètres d'entrée (par défaut -100).}

\item{borne_sup}{La borne supérieure du domaine de validité des paramètres d'entrée (par défaut 100).}
}
\value{
Une liste contenant la solution de l'équation de Riccati et le domaine de validité des paramètres d'entrée.
}
\description{
Cette fonction résout une équation de Riccati en la transformant en une équation de Bernoulli.
Elle renvoie la solution de l'équation de Riccati et le domaine de validité des paramètres d'entrée.
}
\examples{
a <- function(x) { return(sin(x)-cos(-x^2)) }
b <- function(x) { return(cos(x^3)) }
d <- function(x) { return(x) }
y_particular <- function(x) {return((x^3-2 * x+1)/(2*x^2+1))}
t <- 1
y_init <- 1
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
print(sol)
plot(sol[!is.infinite(sol[,1]),],type='l')
}
