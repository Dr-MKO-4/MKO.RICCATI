library(MKO.RICCATI)
library(MKO.RICCATI)
remove.packages("MKO.RICCATI.VRAI")
library(MKO.RICCATI)
?MKO.RICCATI
??MKO.RICCATI
?solve_riccati
a <- function(x) { return(sin(x)-cos(-x^2)) }
b <- function(x) { return(cos(x^3)) }
d <- function(x) { return(x) }
y_particular <- function(x) {return((x^3-2 * x+1)/(2*x^2+1))}
t <- 1
y_init <- 1
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
plot(sol[!is.infinite(sol[,1]),],type='l')
a <- function(x) { return(sin(x)-cos(-x^2)) }
b <- function(x) { return(cos(x^3)) }
d <- function(x) { return(x) }
y_particular <- function(x) {return(sin(x))}
t <- 1
y_init <- 1
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
plot(sol[!is.infinite(sol[,1]),],type='l')
a <- function(x) { return(2) }
b <- function(x) { return(cos(x)) }
d <- function(x) { return(2) }
y_particular <- function(x) {return(sin(x))}
t <- 1
y_init <- 1
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
plot(sol[!is.infinite(sol[,1]),],type='l')
a <- function(x) { return(sin(x)-cos(-x^2)) }
b <- function(x) { return(cos(x^3)) }
d <- function(x) { return(x) }
y_particular <- function(x) {return(sin(x))}
t <- 0
y_init <- 0
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
a <- function(x) { return(2)) }
a <- function(x) { return(2) }
b <- function(x) { return(cos(x)) }
d <- function(x) { return(1) }
y_particular <- function(x) {return(cos(x))}
t <- 0
y_init <- 0
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
a <- function(x) { return(2) }
b <- function(x) { return(3) }
d <- function(x) { return(1) }
y_particular <- function(x) {return(x)}
t <- 0
y_init <- 0
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
a <- function(x) { return(2) }
b <- function(x) { return(3) }
d <- function(x) { return(1) }
y_particular <- function(x) {return(x)}
t <- 1
y_init <- 0
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
plot(sol[!is.infinite(sol[,1]),],type='l')
a <- function(x) { return(2) }
b <- function(x) { return(3) }
d <- function(x) { return(1) }
y_particular <- function(x) {return(x)}
t <- -1
y_init <- 0
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
library(MKO.RICCATI)
a <- function(x) { return(2) }
b <- function(x) { return(3) }
d <- function(x) { return(1) }
y_particular <- function(x) {return(x)}
t <- -1
y_init <- 0
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
library(MKO.RICCATI)
a <- function(x) { return(2) }
b <- function(x) { return(3) }
d <- function(x) { return(1) }
y_particular <- function(x) {return(x)}
t <- -1
y_init <- 0
sol <- solve_riccati(a, b, d, y_particular,y_init,t)
library(MKO.RICCATI)
library(MKO.RICCATI)
f <- function(x){return(sin(x)}
f <- function(x){return(sin(x))}
construire_domaine_C1(f, borne_inf, borne_sup)
construire_domaine_C1(f)
library(ggplot2)
ggplot(construire_domaine)
a <- function(t) { return(sin(t)-exp(-t^2)) }
b <- function(t) { return(cos(t^3)) }
d <- function(t) { return(tan(t)) }
y_particular <- function(t) { return(exp(t)) }
riccati_to_bernoulli(a, b, d, y_particular)
t <- 10
y_init <- 1 # y(0) = 1
y_init
params <- riccati_to_bernoulli(a(t),b(t),d(t),y_particular(t))
solve_bernoulli(t, y_init, params)
plot(solve_bernoulli(t, y_init, params))
for (i in 1:10){
for (m in 1:10){
lines(solve-bernouilli(i,m,params))
}
}
plot(solve_bernoulli(t, y_init, params))
for (i in 1:10){
for (m in 1:10){
lines(solve_bernouilli(i,m,params))
}
}
lines(solve_bernoulli(i,m,params))
}
plot(solve_bernoulli(t, y_init, params))
for (i in 1:10){
for (m in 1:10){
lines(solve_bernoulli(i,m,params))
}
}
plot(solve_bernoulli(t, y_init, params,y_lim=c(0,10)))
plot(solve_bernoulli(t, y_init, params,ylim=c(0,10)))
#' a <- function(t) { return(sin(t)-exp(-t^2)) }
#' b <- function(t) { return(cos(t^3)) }
#' d <- function(t) { return(tan(t)) }
#' y_particular <- function(t) { return(exp(t)) }
#' t <- 10
#' y_init <- 1 # y(0) = 1
#' y_init
#' params <- riccati_to_bernoulli(a(t),b(t),d(t),y_particular(t))
#' solve_bernoulli(t, y_init, params)
#' plot(solve_bernoulli(t, y_init, params,y_lim=))
#' for (i in 1:10){
#' for (m in 1:10){
#' lines(solve_bernoulli(i,m,params))
#' }
#' }
a <- function(t) { return(sin(t)-exp(-t^2)) }
b <- function(t) { return(cos(t^3)) }
d <- function(t) { return(tan(t)) }
y_particular <- function(t) { return(exp(t)) }
t <- 10
y_init <- 1 # y(0) = 1
y_init
params <- riccati_to_bernoulli(a(t),b(t),d(t),y_particular(t))
solve_bernoulli(t, y_init, params)
plot(solve_bernoulli(t, y_init, params,y_lim=))
for (i in 1:10){
for (m in 1:10){
lines(solve_bernoulli(i,m,params))
}
}
a <- function(t) { return(sin(t)-exp(-t^2)) }
b <- function(t) { return(cos(t^3)) }
d <- function(t) { return(tan(t)) }
y_particular <- function(t) { return(exp(t)) }
t <- 10
y_init <- 1 # y(0) = 1
y_init
params <- riccati_to_bernoulli(a(t),b(t),d(t),y_particular(t))
solve_bernoulli(t, y_init, params)
plot(solve_bernoulli(t, y_init, params))
for (i in 1:10){
for (m in 1:10){
lines(solve_bernoulli(i,m,params))
}
}
solve_bernoulli(t, y_init, params)
plot(solve_bernoulli(t, y_init, params,ylim=c(-10,10)))
plot(solve_bernoulli(t, y_init, params,ylim=range(solve_bernoulli(t,y_init,params))))
plot(solve_bernoulli(t, y_init, params,))
for (i in 1:10){
for (m in 1:10){
lines(solve_bernoulli(i,m,params,col=m))
}
}
couleurs <- rainbow(10)
plot(solve_bernoulli(t, y_init, params,))
for (i in 1:10){
for (m in 1:10){
lines(solve_bernoulli(i,m,params,col=couleur[m]))
}
}
params <- riccati_to_bernoulli(a(t),b(t),d(t),y_particular(t))
solve_bernoulli(t, y_init, params)
couleurs <- rainbow(10)
plot(solve_bernoulli(t, y_init, params,))
for (i in 1:10){
for (m in 1:10){
lines(solve_bernoulli(i,m,params,col=couleurs[m]))
}
}
a <- function(t) { return(sin(t)-exp(-t^2)) }
b <- function(t) { return(cos(t^3)) }
d <- function(t) { return(tan(t)) }
y_particular <- function(t) { return(exp(t)) }
t <- 10
y_init <- 1 # y(0) = 1
y_init
params <- riccati_to_bernoulli(a(t),b(t),d(t),y_particular(t))
solve_bernoulli(t, y_init, params)
couleurs <- rainbow(10)
plot(solve_bernoulli(t, y_init, params), type = "l", col = couleurs[1])
for (i in 2:10) {
for (m in 1:10) {
lines(solve_bernoulli(i, m, params), col = couleurs[m])
}
}
solution_riccati <- bernoulli_to_riccati(solution_bernoulli, y_particular,t)
solution_bernoulli <- solve_bernoulli(t, y_init, params_bernoulli)
params_bernoulli <- riccati_to_bernoulli(a(t), b(t), c(t), y_particular(t))
# Résoudre l'équation de Bernoulli
t <- 10
y_init <- 1 # y(0) = 1
solution_bernoulli <- solve_bernoulli(t, y_init, params_bernoulli)
# Transformer la solution de l'équation de Bernoulli en une solution de l'équation de Riccati
solution_riccati <- bernoulli_to_riccati(solution_bernoulli, y_particular,t)
a <- function(t) { return(sin(t)-exp(-t^2)) }
b <- function(t) { return(cos(t^3)) }
d <- function(t) { return(tan(t)) }
y_particular <- function(t) { return(exp(t)) }
# Transformer l'équation de Riccati en une équation de Bernoulli
params_bernoulli <- riccati_to_bernoulli(a(t), b(t), c(t), y_particular(t))
# Résoudre l'équation de Bernoulli
t <- 10
y_init <- 1 # y(0) = 1
solution_bernoulli <- solve_bernoulli(t, y_init, params_bernoulli)
# Transformer la solution de l'équation de Bernoulli en une solution de l'équation de Riccati
solution_riccati <- bernoulli_to_riccati(solution_bernoulli, y_particular,t)
# Afficher la solution de l'équation de Riccati
plot(solve_bernoulli(t, y_init, params), type = "l", col = couleurs[1])
plot(solution_riccati[!is.infinite(solution_riccati[,1]),],type='l')
a <- function(t) { return(sin(t)) }
b <- function(t) { return(cos(t^3)) }
d <- function(t) { return(t) }
y_particular <- function(t) { return(sin(t)) }
# Transformer l'équation de Riccati en une équation de Bernoulli
params_bernoulli <- riccati_to_bernoulli(a(t), b(t), c(t), y_particular(t))
# Résoudre l'équation de Bernoulli
t <- 10
y_init <- 1 # y(0) = 1
solution_bernoulli <- solve_bernoulli(t, y_init, params_bernoulli)
# Transformer la solution de l'équation de Bernoulli en une solution de l'équation de Riccati
solution_riccati <- bernoulli_to_riccati(solution_bernoulli, y_particular,t)
# Afficher la solution de l'équation de Riccati
plot(solve_bernoulli(t, y_init, params), type = "l", col = couleurs[1])
lines(solution_riccati[!is.infinite(solution_riccati[,1]),],col=couleur[2])
a <- function(t) { return(sin(t)) }
b <- function(t) { return(cos(t^3)) }
d <- function(t) { return(t) }
y_particular <- function(t) { return(sin(t)) }
# Transformer l'équation de Riccati en une équation de Bernoulli
params_bernoulli <- riccati_to_bernoulli(a(t), b(t), c(t), y_particular(t))
# Résoudre l'équation de Bernoulli
t <- 10
y_init <- 1 # y(0) = 1
solution_bernoulli <- solve_bernoulli(t, y_init, params_bernoulli)
# Transformer la solution de l'équation de Bernoulli en une solution de l'équation de Riccati
solution_riccati <- bernoulli_to_riccati(solution_bernoulli, y_particular,t)
# Afficher la solution de l'équation de Riccati
plot(solve_bernoulli(t, y_init, params), type = "l", col = couleurs[1])
lines(solution_riccati[!is.infinite(solution_riccati[,1]),],col=couleurs[2])
print(solution_riccati)
plot(solution_riccati[!is.infinite(solution_riccati[,1]),],col=couleurs[2])
plot(solve_bernoulli(t, y_init, params), type = "l", col = couleurs[1])
plot(solve_bernoulli(t, y_init, params), type = "l", col = couleurs[1],ylim=c(-6,12))
lines(solution_riccati[!is.infinite(solution_riccati[,1]),],col=couleurs[2])
plot(solution_riccati[!is.infinite(solution_riccati[,1]),],col=couleurs[2],type="l")
library(MKO.RICCATI)
?solve_bernoulli
